// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package wenwen_seg

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type TermRelation int64

const (
	TermRelation_ForceJoint      TermRelation = 0
	TermRelation_NeedJoint       TermRelation = 1
	TermRelation_SamePhrase      TermRelation = 2
	TermRelation_NextPhrase      TermRelation = 3
	TermRelation_EndTerm         TermRelation = 4
	TermRelation_MaxRelationShip TermRelation = 5
)

func (p TermRelation) String() string {
	switch p {
	case TermRelation_ForceJoint:
		return "ForceJoint"
	case TermRelation_NeedJoint:
		return "NeedJoint"
	case TermRelation_SamePhrase:
		return "SamePhrase"
	case TermRelation_NextPhrase:
		return "NextPhrase"
	case TermRelation_EndTerm:
		return "EndTerm"
	case TermRelation_MaxRelationShip:
		return "MaxRelationShip"
	}
	return "<UNSET>"
}

func TermRelationFromString(s string) (TermRelation, error) {
	switch s {
	case "ForceJoint":
		return TermRelation_ForceJoint, nil
	case "NeedJoint":
		return TermRelation_NeedJoint, nil
	case "SamePhrase":
		return TermRelation_SamePhrase, nil
	case "NextPhrase":
		return TermRelation_NextPhrase, nil
	case "EndTerm":
		return TermRelation_EndTerm, nil
	case "MaxRelationShip":
		return TermRelation_MaxRelationShip, nil
	}
	return TermRelation(0), fmt.Errorf("not a valid TermRelation string")
}

func TermRelationPtr(v TermRelation) *TermRelation { return &v }

func (p TermRelation) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TermRelation) UnmarshalText(text []byte) error {
	q, err := TermRelationFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type RetCode int64

const (
	RetCode_success              RetCode = 0
	RetCode_error_busy           RetCode = 1
	RetCode_error_query_too_long RetCode = 2
	RetCode_error_query_t2sgchar RetCode = 3
	RetCode_fail                 RetCode = 103
)

func (p RetCode) String() string {
	switch p {
	case RetCode_success:
		return "success"
	case RetCode_error_busy:
		return "error_busy"
	case RetCode_error_query_too_long:
		return "error_query_too_long"
	case RetCode_error_query_t2sgchar:
		return "error_query_t2sgchar"
	case RetCode_fail:
		return "fail"
	}
	return "<UNSET>"
}

func RetCodeFromString(s string) (RetCode, error) {
	switch s {
	case "success":
		return RetCode_success, nil
	case "error_busy":
		return RetCode_error_busy, nil
	case "error_query_too_long":
		return RetCode_error_query_too_long, nil
	case "error_query_t2sgchar":
		return RetCode_error_query_t2sgchar, nil
	case "fail":
		return RetCode_fail, nil
	}
	return RetCode(0), fmt.Errorf("not a valid RetCode string")
}

func RetCodePtr(v RetCode) *RetCode { return &v }

func (p RetCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *RetCode) UnmarshalText(text []byte) error {
	q, err := RetCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - TermID
//  - TermWtype
//  - Term_Ntype
//  - RelFlags
//  - Term_NImps
//  - Term_RImps
//  - KCWeight
//  - KCProb
//  - Pos
//  - Len
//  - Weight
//  - Importance
//  - Relation
//  - Tightness
//  - Deletable
type QueryTermInfo struct {
	TermID     int32 `thrift:"term_id,1" json:"term_id"`
	TermWtype  int32 `thrift:"term_wtype,2" json:"term_wtype"`
	Term_Ntype int32 `thrift:"term_Ntype,3" json:"term_Ntype"`
	RelFlags   int16 `thrift:"rel_flags,4" json:"rel_flags"`
	Term_NImps int16 `thrift:"term_NImps,5" json:"term_NImps"`
	Term_RImps int16 `thrift:"term_RImps,6" json:"term_RImps"`
	KCWeight   int16 `thrift:"KCWeight,7" json:"KCWeight"`
	KCProb     int16 `thrift:"KCProb,8" json:"KCProb"`
	Pos        int16 `thrift:"pos,9" json:"pos"`
	Len        int16 `thrift:"len,10" json:"len"`
	Weight     int16 `thrift:"weight,11" json:"weight"`
	Importance int16 `thrift:"importance,12" json:"importance"`
	Relation   int8  `thrift:"relation,13" json:"relation"`
	Tightness  int16 `thrift:"tightness,14" json:"tightness"`
	Deletable  int8  `thrift:"deletable,15" json:"deletable"`
}

func NewQueryTermInfo() *QueryTermInfo {
	return &QueryTermInfo{}
}

func (p *QueryTermInfo) GetTermID() int32 {
	return p.TermID
}

func (p *QueryTermInfo) GetTermWtype() int32 {
	return p.TermWtype
}

func (p *QueryTermInfo) GetTerm_Ntype() int32 {
	return p.Term_Ntype
}

func (p *QueryTermInfo) GetRelFlags() int16 {
	return p.RelFlags
}

func (p *QueryTermInfo) GetTerm_NImps() int16 {
	return p.Term_NImps
}

func (p *QueryTermInfo) GetTerm_RImps() int16 {
	return p.Term_RImps
}

func (p *QueryTermInfo) GetKCWeight() int16 {
	return p.KCWeight
}

func (p *QueryTermInfo) GetKCProb() int16 {
	return p.KCProb
}

func (p *QueryTermInfo) GetPos() int16 {
	return p.Pos
}

func (p *QueryTermInfo) GetLen() int16 {
	return p.Len
}

func (p *QueryTermInfo) GetWeight() int16 {
	return p.Weight
}

func (p *QueryTermInfo) GetImportance() int16 {
	return p.Importance
}

func (p *QueryTermInfo) GetRelation() int8 {
	return p.Relation
}

func (p *QueryTermInfo) GetTightness() int16 {
	return p.Tightness
}

func (p *QueryTermInfo) GetDeletable() int8 {
	return p.Deletable
}
func (p *QueryTermInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QueryTermInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *QueryTermInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TermWtype = v
	}
	return nil
}

func (p *QueryTermInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Term_Ntype = v
	}
	return nil
}

func (p *QueryTermInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.RelFlags = v
	}
	return nil
}

func (p *QueryTermInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Term_NImps = v
	}
	return nil
}

func (p *QueryTermInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Term_RImps = v
	}
	return nil
}

func (p *QueryTermInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.KCWeight = v
	}
	return nil
}

func (p *QueryTermInfo) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.KCProb = v
	}
	return nil
}

func (p *QueryTermInfo) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Pos = v
	}
	return nil
}

func (p *QueryTermInfo) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.Len = v
	}
	return nil
}

func (p *QueryTermInfo) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 11: ", err)
	} else {
		p.Weight = v
	}
	return nil
}

func (p *QueryTermInfo) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 12: ", err)
	} else {
		p.Importance = v
	}
	return nil
}

func (p *QueryTermInfo) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 13: ", err)
	} else {
		temp := int8(v)
		p.Relation = temp
	}
	return nil
}

func (p *QueryTermInfo) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 14: ", err)
	} else {
		p.Tightness = v
	}
	return nil
}

func (p *QueryTermInfo) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 15: ", err)
	} else {
		temp := int8(v)
		p.Deletable = temp
	}
	return nil
}

func (p *QueryTermInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QueryTermInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QueryTermInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_wtype", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term_wtype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermWtype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_wtype (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term_wtype: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_Ntype", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:term_Ntype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Term_Ntype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_Ntype (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:term_Ntype: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rel_flags", thrift.I16, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:rel_flags: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.RelFlags)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.rel_flags (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:rel_flags: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_NImps", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:term_NImps: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Term_NImps)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_NImps (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:term_NImps: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_RImps", thrift.I16, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:term_RImps: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Term_RImps)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_RImps (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:term_RImps: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("KCWeight", thrift.I16, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:KCWeight: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.KCWeight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.KCWeight (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:KCWeight: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("KCProb", thrift.I16, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:KCProb: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.KCProb)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.KCProb (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:KCProb: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pos", thrift.I16, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:pos: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Pos)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pos (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:pos: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("len", thrift.I16, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:len: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Len)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.len (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:len: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("weight", thrift.I16, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:weight: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Weight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.weight (11) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:weight: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("importance", thrift.I16, 12); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:importance: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Importance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.importance (12) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 12:importance: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("relation", thrift.BYTE, 13); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:relation: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Relation)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.relation (13) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 13:relation: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tightness", thrift.I16, 14); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:tightness: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Tightness)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tightness (14) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 14:tightness: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("deletable", thrift.BYTE, 15); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:deletable: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Deletable)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.deletable (15) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 15:deletable: ", p), err)
	}
	return err
}

func (p *QueryTermInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryTermInfo(%+v)", *p)
}

// Attributes:
//  - TextBeg
//  - TextEnd
type TermRange struct {
	TextBeg int16 `thrift:"text_beg,1" json:"text_beg"`
	TextEnd int16 `thrift:"text_end,2" json:"text_end"`
}

func NewTermRange() *TermRange {
	return &TermRange{}
}

func (p *TermRange) GetTextBeg() int16 {
	return p.TextBeg
}

func (p *TermRange) GetTextEnd() int16 {
	return p.TextEnd
}
func (p *TermRange) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TermRange) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TextBeg = v
	}
	return nil
}

func (p *TermRange) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TextEnd = v
	}
	return nil
}

func (p *TermRange) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TermRange"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TermRange) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text_beg", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:text_beg: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TextBeg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text_beg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:text_beg: ", p), err)
	}
	return err
}

func (p *TermRange) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("text_end", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text_end: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TextEnd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.text_end (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text_end: ", p), err)
	}
	return err
}

func (p *TermRange) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TermRange(%+v)", *p)
}

// Attributes:
//  - TermBeg
//  - TermEnd
//  - Type
//  - ID
//  - Len
type EntityInfo struct {
	TermBeg int16 `thrift:"term_beg,1" json:"term_beg"`
	TermEnd int16 `thrift:"term_end,2" json:"term_end"`
	Type    int32 `thrift:"type,3" json:"type"`
	ID      int32 `thrift:"id,4" json:"id"`
	Len     int16 `thrift:"len,5" json:"len"`
}

func NewEntityInfo() *EntityInfo {
	return &EntityInfo{}
}

func (p *EntityInfo) GetTermBeg() int16 {
	return p.TermBeg
}

func (p *EntityInfo) GetTermEnd() int16 {
	return p.TermEnd
}

func (p *EntityInfo) GetType() int32 {
	return p.Type
}

func (p *EntityInfo) GetID() int32 {
	return p.ID
}

func (p *EntityInfo) GetLen() int16 {
	return p.Len
}
func (p *EntityInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *EntityInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermBeg = v
	}
	return nil
}

func (p *EntityInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TermEnd = v
	}
	return nil
}

func (p *EntityInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Type = v
	}
	return nil
}

func (p *EntityInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *EntityInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Len = v
	}
	return nil
}

func (p *EntityInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EntityInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EntityInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_beg", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_beg: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TermBeg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_beg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_beg: ", p), err)
	}
	return err
}

func (p *EntityInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_end", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term_end: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TermEnd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_end (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term_end: ", p), err)
	}
	return err
}

func (p *EntityInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *EntityInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err)
	}
	return err
}

func (p *EntityInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("len", thrift.I16, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:len: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Len)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.len (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:len: ", p), err)
	}
	return err
}

func (p *EntityInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EntityInfo(%+v)", *p)
}

// Attributes:
//  - TermID
//  - Len
//  - Flag
type SynTermInfo struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
	Len    int8  `thrift:"len,2" json:"len"`
	Flag   int8  `thrift:"flag,3" json:"flag"`
}

func NewSynTermInfo() *SynTermInfo {
	return &SynTermInfo{}
}

func (p *SynTermInfo) GetTermID() int32 {
	return p.TermID
}

func (p *SynTermInfo) GetLen() int8 {
	return p.Len
}

func (p *SynTermInfo) GetFlag() int8 {
	return p.Flag
}
func (p *SynTermInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SynTermInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SynTermInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := int8(v)
		p.Len = temp
	}
	return nil
}

func (p *SynTermInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Flag = temp
	}
	return nil
}

func (p *SynTermInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SynTermInfo"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SynTermInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SynTermInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("len", thrift.BYTE, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:len: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Len)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.len (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:len: ", p), err)
	}
	return err
}

func (p *SynTermInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flag", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Flag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err)
	}
	return err
}

func (p *SynTermInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SynTermInfo(%+v)", *p)
}

// Attributes:
//  - TermBeg
//  - TermEnd
//  - Len
//  - Type
//  - Weight
//  - ContextWeight
type SynTermWord struct {
	TermBeg       int16   `thrift:"term_beg,1" json:"term_beg"`
	TermEnd       int16   `thrift:"term_end,2" json:"term_end"`
	Len           int8    `thrift:"len,3" json:"len"`
	Type          int8    `thrift:"type,4" json:"type"`
	Weight        float64 `thrift:"weight,5" json:"weight"`
	ContextWeight float64 `thrift:"context_weight,6" json:"context_weight"`
}

func NewSynTermWord() *SynTermWord {
	return &SynTermWord{}
}

func (p *SynTermWord) GetTermBeg() int16 {
	return p.TermBeg
}

func (p *SynTermWord) GetTermEnd() int16 {
	return p.TermEnd
}

func (p *SynTermWord) GetLen() int8 {
	return p.Len
}

func (p *SynTermWord) GetType() int8 {
	return p.Type
}

func (p *SynTermWord) GetWeight() float64 {
	return p.Weight
}

func (p *SynTermWord) GetContextWeight() float64 {
	return p.ContextWeight
}
func (p *SynTermWord) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SynTermWord) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermBeg = v
	}
	return nil
}

func (p *SynTermWord) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TermEnd = v
	}
	return nil
}

func (p *SynTermWord) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Len = temp
	}
	return nil
}

func (p *SynTermWord) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Type = temp
	}
	return nil
}

func (p *SynTermWord) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Weight = v
	}
	return nil
}

func (p *SynTermWord) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ContextWeight = v
	}
	return nil
}

func (p *SynTermWord) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SynTermWord"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SynTermWord) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_beg", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_beg: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TermBeg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_beg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_beg: ", p), err)
	}
	return err
}

func (p *SynTermWord) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_end", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term_end: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.TermEnd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_end (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term_end: ", p), err)
	}
	return err
}

func (p *SynTermWord) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("len", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:len: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Len)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.len (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:len: ", p), err)
	}
	return err
}

func (p *SynTermWord) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
	}
	return err
}

func (p *SynTermWord) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("weight", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:weight: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Weight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.weight (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:weight: ", p), err)
	}
	return err
}

func (p *SynTermWord) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context_weight", thrift.DOUBLE, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:context_weight: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.ContextWeight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.context_weight (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:context_weight: ", p), err)
	}
	return err
}

func (p *SynTermWord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SynTermWord(%+v)", *p)
}

// Attributes:
//  - OrgBeg
//  - OrgEnd
//  - OrgLen
//  - OrgFlag
//  - SynWords
type SynTermMapping struct {
	OrgBeg   int16          `thrift:"org_beg,1" json:"org_beg"`
	OrgEnd   int16          `thrift:"org_end,2" json:"org_end"`
	OrgLen   int8           `thrift:"org_len,3" json:"org_len"`
	OrgFlag  int8           `thrift:"org_flag,4" json:"org_flag"`
	SynWords []*SynTermWord `thrift:"syn_words,5" json:"syn_words"`
}

func NewSynTermMapping() *SynTermMapping {
	return &SynTermMapping{}
}

func (p *SynTermMapping) GetOrgBeg() int16 {
	return p.OrgBeg
}

func (p *SynTermMapping) GetOrgEnd() int16 {
	return p.OrgEnd
}

func (p *SynTermMapping) GetOrgLen() int8 {
	return p.OrgLen
}

func (p *SynTermMapping) GetOrgFlag() int8 {
	return p.OrgFlag
}

func (p *SynTermMapping) GetSynWords() []*SynTermWord {
	return p.SynWords
}
func (p *SynTermMapping) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SynTermMapping) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.OrgBeg = v
	}
	return nil
}

func (p *SynTermMapping) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OrgEnd = v
	}
	return nil
}

func (p *SynTermMapping) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.OrgLen = temp
	}
	return nil
}

func (p *SynTermMapping) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.OrgFlag = temp
	}
	return nil
}

func (p *SynTermMapping) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SynTermWord, 0, size)
	p.SynWords = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &SynTermWord{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.SynWords = append(p.SynWords, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SynTermMapping) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SynTermMapping"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SynTermMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("org_beg", thrift.I16, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:org_beg: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.OrgBeg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.org_beg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:org_beg: ", p), err)
	}
	return err
}

func (p *SynTermMapping) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("org_end", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:org_end: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.OrgEnd)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.org_end (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:org_end: ", p), err)
	}
	return err
}

func (p *SynTermMapping) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("org_len", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:org_len: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.OrgLen)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.org_len (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:org_len: ", p), err)
	}
	return err
}

func (p *SynTermMapping) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("org_flag", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:org_flag: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.OrgFlag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.org_flag (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:org_flag: ", p), err)
	}
	return err
}

func (p *SynTermMapping) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syn_words", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:syn_words: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SynWords)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SynWords {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:syn_words: ", p), err)
	}
	return err
}

func (p *SynTermMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SynTermMapping(%+v)", *p)
}

// Attributes:
//  - Retcode
//  - AnnotationTerms
//  - Terms
//  - EntityWords
//  - SynTerms
//  - SynTermMappings
//  - RefinedQuery
//  - KeyRefinedQuery
//  - QueryGbkSbc
//  - QueryBchart
type QuerySegResponse struct {
	Retcode         RetCode           `thrift:"retcode,1" json:"retcode"`
	AnnotationTerms []*TermRange      `thrift:"annotation_terms,2" json:"annotation_terms"`
	Terms           []*QueryTermInfo  `thrift:"terms,3" json:"terms"`
	EntityWords     []*EntityInfo     `thrift:"entity_words,4" json:"entity_words"`
	SynTerms        []*SynTermInfo    `thrift:"syn_terms,5" json:"syn_terms"`
	SynTermMappings []*SynTermMapping `thrift:"syn_term_mappings,6" json:"syn_term_mappings"`
	RefinedQuery    [][]int8          `thrift:"refined_query,7" json:"refined_query"`
	KeyRefinedQuery [][]int8          `thrift:"key_refined_query,8" json:"key_refined_query"`
	QueryGbkSbc     string            `thrift:"query_gbk_sbc,9" json:"query_gbk_sbc"`
	QueryBchart     string            `thrift:"query_bchart,10" json:"query_bchart"`
}

func NewQuerySegResponse() *QuerySegResponse {
	return &QuerySegResponse{}
}

func (p *QuerySegResponse) GetRetcode() RetCode {
	return p.Retcode
}

func (p *QuerySegResponse) GetAnnotationTerms() []*TermRange {
	return p.AnnotationTerms
}

func (p *QuerySegResponse) GetTerms() []*QueryTermInfo {
	return p.Terms
}

func (p *QuerySegResponse) GetEntityWords() []*EntityInfo {
	return p.EntityWords
}

func (p *QuerySegResponse) GetSynTerms() []*SynTermInfo {
	return p.SynTerms
}

func (p *QuerySegResponse) GetSynTermMappings() []*SynTermMapping {
	return p.SynTermMappings
}

func (p *QuerySegResponse) GetRefinedQuery() [][]int8 {
	return p.RefinedQuery
}

func (p *QuerySegResponse) GetKeyRefinedQuery() [][]int8 {
	return p.KeyRefinedQuery
}

func (p *QuerySegResponse) GetQueryGbkSbc() string {
	return p.QueryGbkSbc
}

func (p *QuerySegResponse) GetQueryBchart() string {
	return p.QueryBchart
}
func (p *QuerySegResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *QuerySegResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := RetCode(v)
		p.Retcode = temp
	}
	return nil
}

func (p *QuerySegResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*TermRange, 0, size)
	p.AnnotationTerms = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &TermRange{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.AnnotationTerms = append(p.AnnotationTerms, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QuerySegResponse) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*QueryTermInfo, 0, size)
	p.Terms = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &QueryTermInfo{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Terms = append(p.Terms, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QuerySegResponse) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*EntityInfo, 0, size)
	p.EntityWords = tSlice
	for i := 0; i < size; i++ {
		_elem3 := &EntityInfo{}
		if err := _elem3.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
		}
		p.EntityWords = append(p.EntityWords, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QuerySegResponse) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SynTermInfo, 0, size)
	p.SynTerms = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &SynTermInfo{}
		if err := _elem4.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.SynTerms = append(p.SynTerms, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QuerySegResponse) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*SynTermMapping, 0, size)
	p.SynTermMappings = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &SynTermMapping{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.SynTermMappings = append(p.SynTermMappings, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QuerySegResponse) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]int8, 0, size)
	p.RefinedQuery = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int8, 0, size)
		_elem6 := tSlice
		for i := 0; i < size; i++ {
			var _elem7 int8
			if v, err := iprot.ReadByte(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := int8(v)
				_elem7 = temp
			}
			_elem6 = append(_elem6, _elem7)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.RefinedQuery = append(p.RefinedQuery, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QuerySegResponse) readField8(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]int8, 0, size)
	p.KeyRefinedQuery = tSlice
	for i := 0; i < size; i++ {
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]int8, 0, size)
		_elem8 := tSlice
		for i := 0; i < size; i++ {
			var _elem9 int8
			if v, err := iprot.ReadByte(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := int8(v)
				_elem9 = temp
			}
			_elem8 = append(_elem8, _elem9)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.KeyRefinedQuery = append(p.KeyRefinedQuery, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *QuerySegResponse) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.QueryGbkSbc = v
	}
	return nil
}

func (p *QuerySegResponse) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 10: ", err)
	} else {
		p.QueryBchart = v
	}
	return nil
}

func (p *QuerySegResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("QuerySegResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *QuerySegResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("retcode", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retcode: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Retcode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.retcode (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retcode: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("annotation_terms", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:annotation_terms: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AnnotationTerms)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.AnnotationTerms {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:annotation_terms: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("terms", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:terms: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Terms)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Terms {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:terms: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entity_words", thrift.LIST, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entity_words: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EntityWords)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.EntityWords {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entity_words: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syn_terms", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:syn_terms: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SynTerms)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SynTerms {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:syn_terms: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("syn_term_mappings", thrift.LIST, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:syn_term_mappings: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SynTermMappings)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.SynTermMappings {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:syn_term_mappings: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("refined_query", thrift.LIST, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:refined_query: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.RefinedQuery)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.RefinedQuery {
		if err := oprot.WriteListBegin(thrift.BYTE, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteByte(int8(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:refined_query: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key_refined_query", thrift.LIST, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:key_refined_query: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.LIST, len(p.KeyRefinedQuery)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.KeyRefinedQuery {
		if err := oprot.WriteListBegin(thrift.BYTE, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := oprot.WriteByte(int8(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:key_refined_query: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_gbk_sbc", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:query_gbk_sbc: ", p), err)
	}
	if err := oprot.WriteString(string(p.QueryGbkSbc)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_gbk_sbc (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:query_gbk_sbc: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_bchart", thrift.STRING, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:query_bchart: ", p), err)
	}
	if err := oprot.WriteString(string(p.QueryBchart)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_bchart (10) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:query_bchart: ", p), err)
	}
	return err
}

func (p *QuerySegResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QuerySegResponse(%+v)", *p)
}

// Attributes:
//  - Termid
//  - Level
//  - Type
//  - Pos
//  - Weight
type ExtendTerm struct {
	Termid int32   `thrift:"termid,1" json:"termid"`
	Level  int16   `thrift:"level,2" json:"level"`
	Type   int8    `thrift:"type,3" json:"type"`
	Pos    int8    `thrift:"pos,4" json:"pos"`
	Weight float64 `thrift:"weight,5" json:"weight"`
}

func NewExtendTerm() *ExtendTerm {
	return &ExtendTerm{}
}

func (p *ExtendTerm) GetTermid() int32 {
	return p.Termid
}

func (p *ExtendTerm) GetLevel() int16 {
	return p.Level
}

func (p *ExtendTerm) GetType() int8 {
	return p.Type
}

func (p *ExtendTerm) GetPos() int8 {
	return p.Pos
}

func (p *ExtendTerm) GetWeight() float64 {
	return p.Weight
}
func (p *ExtendTerm) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ExtendTerm) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Termid = v
	}
	return nil
}

func (p *ExtendTerm) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Level = v
	}
	return nil
}

func (p *ExtendTerm) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := int8(v)
		p.Type = temp
	}
	return nil
}

func (p *ExtendTerm) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := int8(v)
		p.Pos = temp
	}
	return nil
}

func (p *ExtendTerm) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Weight = v
	}
	return nil
}

func (p *ExtendTerm) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExtendTerm"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ExtendTerm) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("termid", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:termid: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Termid)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.termid (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:termid: ", p), err)
	}
	return err
}

func (p *ExtendTerm) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("level", thrift.I16, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:level: ", p), err)
	}
	if err := oprot.WriteI16(int16(p.Level)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.level (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:level: ", p), err)
	}
	return err
}

func (p *ExtendTerm) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.BYTE, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err)
	}
	return err
}

func (p *ExtendTerm) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pos", thrift.BYTE, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pos: ", p), err)
	}
	if err := oprot.WriteByte(int8(p.Pos)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pos (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pos: ", p), err)
	}
	return err
}

func (p *ExtendTerm) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("weight", thrift.DOUBLE, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:weight: ", p), err)
	}
	if err := oprot.WriteDouble(float64(p.Weight)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.weight (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:weight: ", p), err)
	}
	return err
}

func (p *ExtendTerm) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExtendTerm(%+v)", *p)
}
