// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package wenwen_seg

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type SegService interface {
	// Parameters:
	//  - QueryGbk
	//  - QueryInfo
	QuerySegment(query_gbk string, query_info int32) (r *QuerySegResponse, err error)
	// Parameters:
	//  - TermID
	GetTermType(term_id int32) (r int32, err error)
	// Parameters:
	//  - TermID
	GetTermWtype(term_id int32) (r int32, err error)
	// Parameters:
	//  - TermID
	GetTermWf(term_id int32) (r int32, err error)
	// Parameters:
	//  - TermID
	GetTermQf(term_id int32) (r int32, err error)
	// Parameters:
	//  - TermID
	GetTermQef(term_id int32) (r int32, err error)
	// Parameters:
	//  - TermID
	GetTermDelf(term_id int32) (r int32, err error)
	// Parameters:
	//  - TermID
	GetTermText(term_id int32) (r string, err error)
	// Parameters:
	//  - TermID
	GetTermTextGbk(term_id int32) (r string, err error)
	// Parameters:
	//  - Wtype
	Postag2string(wtype int32) (r string, err error)
	// Parameters:
	//  - TermID
	GetExtendTerm(term_id int32) (r []*ExtendTerm, err error)
}

type SegServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewSegServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SegServiceClient {
	return &SegServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewSegServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SegServiceClient {
	return &SegServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - QueryGbk
//  - QueryInfo
func (p *SegServiceClient) QuerySegment(query_gbk string, query_info int32) (r *QuerySegResponse, err error) {
	if err = p.sendQuerySegment(query_gbk, query_info); err != nil {
		return
	}
	return p.recvQuerySegment()
}

func (p *SegServiceClient) sendQuerySegment(query_gbk string, query_info int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("query_segment", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceQuerySegmentArgs{
		QueryGbk:  query_gbk,
		QueryInfo: query_info,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvQuerySegment() (value *QuerySegResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "query_segment" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "query_segment failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "query_segment failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "query_segment failed: invalid message type")
		return
	}
	result := SegServiceQuerySegmentResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetTermType(term_id int32) (r int32, err error) {
	if err = p.sendGetTermType(term_id); err != nil {
		return
	}
	return p.recvGetTermType()
}

func (p *SegServiceClient) sendGetTermType(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_term_type", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetTermTypeArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetTermType() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_term_type" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_term_type failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_term_type failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_term_type failed: invalid message type")
		return
	}
	result := SegServiceGetTermTypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetTermWtype(term_id int32) (r int32, err error) {
	if err = p.sendGetTermWtype(term_id); err != nil {
		return
	}
	return p.recvGetTermWtype()
}

func (p *SegServiceClient) sendGetTermWtype(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_term_wtype", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetTermWtypeArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetTermWtype() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_term_wtype" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_term_wtype failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_term_wtype failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_term_wtype failed: invalid message type")
		return
	}
	result := SegServiceGetTermWtypeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetTermWf(term_id int32) (r int32, err error) {
	if err = p.sendGetTermWf(term_id); err != nil {
		return
	}
	return p.recvGetTermWf()
}

func (p *SegServiceClient) sendGetTermWf(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_term_wf", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetTermWfArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetTermWf() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_term_wf" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_term_wf failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_term_wf failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error17 error
		error17, err = error16.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error17
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_term_wf failed: invalid message type")
		return
	}
	result := SegServiceGetTermWfResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetTermQf(term_id int32) (r int32, err error) {
	if err = p.sendGetTermQf(term_id); err != nil {
		return
	}
	return p.recvGetTermQf()
}

func (p *SegServiceClient) sendGetTermQf(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_term_qf", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetTermQfArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetTermQf() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_term_qf" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_term_qf failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_term_qf failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error19 error
		error19, err = error18.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error19
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_term_qf failed: invalid message type")
		return
	}
	result := SegServiceGetTermQfResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetTermQef(term_id int32) (r int32, err error) {
	if err = p.sendGetTermQef(term_id); err != nil {
		return
	}
	return p.recvGetTermQef()
}

func (p *SegServiceClient) sendGetTermQef(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_term_qef", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetTermQefArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetTermQef() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_term_qef" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_term_qef failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_term_qef failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error20 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error21 error
		error21, err = error20.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error21
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_term_qef failed: invalid message type")
		return
	}
	result := SegServiceGetTermQefResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetTermDelf(term_id int32) (r int32, err error) {
	if err = p.sendGetTermDelf(term_id); err != nil {
		return
	}
	return p.recvGetTermDelf()
}

func (p *SegServiceClient) sendGetTermDelf(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_term_delf", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetTermDelfArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetTermDelf() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_term_delf" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_term_delf failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_term_delf failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_term_delf failed: invalid message type")
		return
	}
	result := SegServiceGetTermDelfResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetTermText(term_id int32) (r string, err error) {
	if err = p.sendGetTermText(term_id); err != nil {
		return
	}
	return p.recvGetTermText()
}

func (p *SegServiceClient) sendGetTermText(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_term_text", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetTermTextArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetTermText() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_term_text" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_term_text failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_term_text failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_term_text failed: invalid message type")
		return
	}
	result := SegServiceGetTermTextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetTermTextGbk(term_id int32) (r string, err error) {
	if err = p.sendGetTermTextGbk(term_id); err != nil {
		return
	}
	return p.recvGetTermTextGbk()
}

func (p *SegServiceClient) sendGetTermTextGbk(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_term_text_gbk", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetTermTextGbkArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetTermTextGbk() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_term_text_gbk" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_term_text_gbk failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_term_text_gbk failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_term_text_gbk failed: invalid message type")
		return
	}
	result := SegServiceGetTermTextGbkResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Wtype
func (p *SegServiceClient) Postag2string(wtype int32) (r string, err error) {
	if err = p.sendPostag2string(wtype); err != nil {
		return
	}
	return p.recvPostag2string()
}

func (p *SegServiceClient) sendPostag2string(wtype int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("postag2string", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServicePostag2stringArgs{
		Wtype: wtype,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvPostag2string() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "postag2string" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "postag2string failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "postag2string failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "postag2string failed: invalid message type")
		return
	}
	result := SegServicePostag2stringResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - TermID
func (p *SegServiceClient) GetExtendTerm(term_id int32) (r []*ExtendTerm, err error) {
	if err = p.sendGetExtendTerm(term_id); err != nil {
		return
	}
	return p.recvGetExtendTerm()
}

func (p *SegServiceClient) sendGetExtendTerm(term_id int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("get_extend_term", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := SegServiceGetExtendTermArgs{
		TermID: term_id,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *SegServiceClient) recvGetExtendTerm() (value []*ExtendTerm, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "get_extend_term" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get_extend_term failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get_extend_term failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get_extend_term failed: invalid message type")
		return
	}
	result := SegServiceGetExtendTermResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type SegServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      SegService
}

func (p *SegServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *SegServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *SegServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewSegServiceProcessor(handler SegService) *SegServiceProcessor {

	self32 := &SegServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self32.processorMap["query_segment"] = &segServiceProcessorQuerySegment{handler: handler}
	self32.processorMap["get_term_type"] = &segServiceProcessorGetTermType{handler: handler}
	self32.processorMap["get_term_wtype"] = &segServiceProcessorGetTermWtype{handler: handler}
	self32.processorMap["get_term_wf"] = &segServiceProcessorGetTermWf{handler: handler}
	self32.processorMap["get_term_qf"] = &segServiceProcessorGetTermQf{handler: handler}
	self32.processorMap["get_term_qef"] = &segServiceProcessorGetTermQef{handler: handler}
	self32.processorMap["get_term_delf"] = &segServiceProcessorGetTermDelf{handler: handler}
	self32.processorMap["get_term_text"] = &segServiceProcessorGetTermText{handler: handler}
	self32.processorMap["get_term_text_gbk"] = &segServiceProcessorGetTermTextGbk{handler: handler}
	self32.processorMap["postag2string"] = &segServiceProcessorPostag2string{handler: handler}
	self32.processorMap["get_extend_term"] = &segServiceProcessorGetExtendTerm{handler: handler}
	return self32
}

func (p *SegServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x33 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x33.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x33

}

type segServiceProcessorQuerySegment struct {
	handler SegService
}

func (p *segServiceProcessorQuerySegment) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceQuerySegmentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("query_segment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceQuerySegmentResult{}
	var retval *QuerySegResponse
	var err2 error
	if retval, err2 = p.handler.QuerySegment(args.QueryGbk, args.QueryInfo); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query_segment: "+err2.Error())
		oprot.WriteMessageBegin("query_segment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("query_segment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetTermType struct {
	handler SegService
}

func (p *segServiceProcessorGetTermType) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetTermTypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_term_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetTermTypeResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetTermType(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_term_type: "+err2.Error())
		oprot.WriteMessageBegin("get_term_type", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_term_type", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetTermWtype struct {
	handler SegService
}

func (p *segServiceProcessorGetTermWtype) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetTermWtypeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_term_wtype", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetTermWtypeResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetTermWtype(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_term_wtype: "+err2.Error())
		oprot.WriteMessageBegin("get_term_wtype", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_term_wtype", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetTermWf struct {
	handler SegService
}

func (p *segServiceProcessorGetTermWf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetTermWfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_term_wf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetTermWfResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetTermWf(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_term_wf: "+err2.Error())
		oprot.WriteMessageBegin("get_term_wf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_term_wf", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetTermQf struct {
	handler SegService
}

func (p *segServiceProcessorGetTermQf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetTermQfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_term_qf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetTermQfResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetTermQf(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_term_qf: "+err2.Error())
		oprot.WriteMessageBegin("get_term_qf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_term_qf", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetTermQef struct {
	handler SegService
}

func (p *segServiceProcessorGetTermQef) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetTermQefArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_term_qef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetTermQefResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetTermQef(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_term_qef: "+err2.Error())
		oprot.WriteMessageBegin("get_term_qef", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_term_qef", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetTermDelf struct {
	handler SegService
}

func (p *segServiceProcessorGetTermDelf) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetTermDelfArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_term_delf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetTermDelfResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.GetTermDelf(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_term_delf: "+err2.Error())
		oprot.WriteMessageBegin("get_term_delf", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_term_delf", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetTermText struct {
	handler SegService
}

func (p *segServiceProcessorGetTermText) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetTermTextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_term_text", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetTermTextResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetTermText(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_term_text: "+err2.Error())
		oprot.WriteMessageBegin("get_term_text", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_term_text", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetTermTextGbk struct {
	handler SegService
}

func (p *segServiceProcessorGetTermTextGbk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetTermTextGbkArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_term_text_gbk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetTermTextGbkResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetTermTextGbk(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_term_text_gbk: "+err2.Error())
		oprot.WriteMessageBegin("get_term_text_gbk", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("get_term_text_gbk", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorPostag2string struct {
	handler SegService
}

func (p *segServiceProcessorPostag2string) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServicePostag2stringArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("postag2string", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServicePostag2stringResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Postag2string(args.Wtype); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing postag2string: "+err2.Error())
		oprot.WriteMessageBegin("postag2string", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("postag2string", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type segServiceProcessorGetExtendTerm struct {
	handler SegService
}

func (p *segServiceProcessorGetExtendTerm) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := SegServiceGetExtendTermArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get_extend_term", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := SegServiceGetExtendTermResult{}
	var retval []*ExtendTerm
	var err2 error
	if retval, err2 = p.handler.GetExtendTerm(args.TermID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_extend_term: "+err2.Error())
		oprot.WriteMessageBegin("get_extend_term", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("get_extend_term", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - QueryGbk
//  - QueryInfo
type SegServiceQuerySegmentArgs struct {
	QueryGbk  string `thrift:"query_gbk,1" json:"query_gbk"`
	QueryInfo int32  `thrift:"query_info,2" json:"query_info"`
}

func NewSegServiceQuerySegmentArgs() *SegServiceQuerySegmentArgs {
	return &SegServiceQuerySegmentArgs{}
}

func (p *SegServiceQuerySegmentArgs) GetQueryGbk() string {
	return p.QueryGbk
}

func (p *SegServiceQuerySegmentArgs) GetQueryInfo() int32 {
	return p.QueryInfo
}
func (p *SegServiceQuerySegmentArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceQuerySegmentArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.QueryGbk = v
	}
	return nil
}

func (p *SegServiceQuerySegmentArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.QueryInfo = v
	}
	return nil
}

func (p *SegServiceQuerySegmentArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_segment_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceQuerySegmentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_gbk", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_gbk: ", p), err)
	}
	if err := oprot.WriteString(string(p.QueryGbk)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_gbk (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_gbk: ", p), err)
	}
	return err
}

func (p *SegServiceQuerySegmentArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("query_info", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:query_info: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.QueryInfo)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.query_info (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:query_info: ", p), err)
	}
	return err
}

func (p *SegServiceQuerySegmentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceQuerySegmentArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceQuerySegmentResult struct {
	Success *QuerySegResponse `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceQuerySegmentResult() *SegServiceQuerySegmentResult {
	return &SegServiceQuerySegmentResult{}
}

var SegServiceQuerySegmentResult_Success_DEFAULT *QuerySegResponse

func (p *SegServiceQuerySegmentResult) GetSuccess() *QuerySegResponse {
	if !p.IsSetSuccess() {
		return SegServiceQuerySegmentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SegServiceQuerySegmentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceQuerySegmentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceQuerySegmentResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &QuerySegResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *SegServiceQuerySegmentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("query_segment_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceQuerySegmentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceQuerySegmentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceQuerySegmentResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetTermTypeArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetTermTypeArgs() *SegServiceGetTermTypeArgs {
	return &SegServiceGetTermTypeArgs{}
}

func (p *SegServiceGetTermTypeArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetTermTypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermTypeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetTermTypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_type_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermTypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetTermTypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermTypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetTermTypeResult struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetTermTypeResult() *SegServiceGetTermTypeResult {
	return &SegServiceGetTermTypeResult{}
}

var SegServiceGetTermTypeResult_Success_DEFAULT int32

func (p *SegServiceGetTermTypeResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SegServiceGetTermTypeResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServiceGetTermTypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetTermTypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermTypeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServiceGetTermTypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_type_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermTypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetTermTypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermTypeResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetTermWtypeArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetTermWtypeArgs() *SegServiceGetTermWtypeArgs {
	return &SegServiceGetTermWtypeArgs{}
}

func (p *SegServiceGetTermWtypeArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetTermWtypeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermWtypeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetTermWtypeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_wtype_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermWtypeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetTermWtypeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermWtypeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetTermWtypeResult struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetTermWtypeResult() *SegServiceGetTermWtypeResult {
	return &SegServiceGetTermWtypeResult{}
}

var SegServiceGetTermWtypeResult_Success_DEFAULT int32

func (p *SegServiceGetTermWtypeResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SegServiceGetTermWtypeResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServiceGetTermWtypeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetTermWtypeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermWtypeResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServiceGetTermWtypeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_wtype_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermWtypeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetTermWtypeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermWtypeResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetTermWfArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetTermWfArgs() *SegServiceGetTermWfArgs {
	return &SegServiceGetTermWfArgs{}
}

func (p *SegServiceGetTermWfArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetTermWfArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermWfArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetTermWfArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_wf_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermWfArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetTermWfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermWfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetTermWfResult struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetTermWfResult() *SegServiceGetTermWfResult {
	return &SegServiceGetTermWfResult{}
}

var SegServiceGetTermWfResult_Success_DEFAULT int32

func (p *SegServiceGetTermWfResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SegServiceGetTermWfResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServiceGetTermWfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetTermWfResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermWfResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServiceGetTermWfResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_wf_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermWfResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetTermWfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermWfResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetTermQfArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetTermQfArgs() *SegServiceGetTermQfArgs {
	return &SegServiceGetTermQfArgs{}
}

func (p *SegServiceGetTermQfArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetTermQfArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermQfArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetTermQfArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_qf_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermQfArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetTermQfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermQfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetTermQfResult struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetTermQfResult() *SegServiceGetTermQfResult {
	return &SegServiceGetTermQfResult{}
}

var SegServiceGetTermQfResult_Success_DEFAULT int32

func (p *SegServiceGetTermQfResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SegServiceGetTermQfResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServiceGetTermQfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetTermQfResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermQfResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServiceGetTermQfResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_qf_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermQfResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetTermQfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermQfResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetTermQefArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetTermQefArgs() *SegServiceGetTermQefArgs {
	return &SegServiceGetTermQefArgs{}
}

func (p *SegServiceGetTermQefArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetTermQefArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermQefArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetTermQefArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_qef_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermQefArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetTermQefArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermQefArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetTermQefResult struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetTermQefResult() *SegServiceGetTermQefResult {
	return &SegServiceGetTermQefResult{}
}

var SegServiceGetTermQefResult_Success_DEFAULT int32

func (p *SegServiceGetTermQefResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SegServiceGetTermQefResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServiceGetTermQefResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetTermQefResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermQefResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServiceGetTermQefResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_qef_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermQefResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetTermQefResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermQefResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetTermDelfArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetTermDelfArgs() *SegServiceGetTermDelfArgs {
	return &SegServiceGetTermDelfArgs{}
}

func (p *SegServiceGetTermDelfArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetTermDelfArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermDelfArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetTermDelfArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_delf_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermDelfArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetTermDelfArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermDelfArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetTermDelfResult struct {
	Success *int32 `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetTermDelfResult() *SegServiceGetTermDelfResult {
	return &SegServiceGetTermDelfResult{}
}

var SegServiceGetTermDelfResult_Success_DEFAULT int32

func (p *SegServiceGetTermDelfResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return SegServiceGetTermDelfResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServiceGetTermDelfResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetTermDelfResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermDelfResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServiceGetTermDelfResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_delf_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermDelfResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetTermDelfResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermDelfResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetTermTextArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetTermTextArgs() *SegServiceGetTermTextArgs {
	return &SegServiceGetTermTextArgs{}
}

func (p *SegServiceGetTermTextArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetTermTextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermTextArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetTermTextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_text_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermTextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetTermTextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermTextArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetTermTextResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetTermTextResult() *SegServiceGetTermTextResult {
	return &SegServiceGetTermTextResult{}
}

var SegServiceGetTermTextResult_Success_DEFAULT string

func (p *SegServiceGetTermTextResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return SegServiceGetTermTextResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServiceGetTermTextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetTermTextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermTextResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServiceGetTermTextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_text_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermTextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetTermTextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermTextResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetTermTextGbkArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetTermTextGbkArgs() *SegServiceGetTermTextGbkArgs {
	return &SegServiceGetTermTextGbkArgs{}
}

func (p *SegServiceGetTermTextGbkArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetTermTextGbkArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermTextGbkArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetTermTextGbkArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_text_gbk_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermTextGbkArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetTermTextGbkArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermTextGbkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetTermTextGbkResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetTermTextGbkResult() *SegServiceGetTermTextGbkResult {
	return &SegServiceGetTermTextGbkResult{}
}

var SegServiceGetTermTextGbkResult_Success_DEFAULT string

func (p *SegServiceGetTermTextGbkResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return SegServiceGetTermTextGbkResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServiceGetTermTextGbkResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetTermTextGbkResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetTermTextGbkResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServiceGetTermTextGbkResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_term_text_gbk_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetTermTextGbkResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetTermTextGbkResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetTermTextGbkResult(%+v)", *p)
}

// Attributes:
//  - Wtype
type SegServicePostag2stringArgs struct {
	Wtype int32 `thrift:"wtype,1" json:"wtype"`
}

func NewSegServicePostag2stringArgs() *SegServicePostag2stringArgs {
	return &SegServicePostag2stringArgs{}
}

func (p *SegServicePostag2stringArgs) GetWtype() int32 {
	return p.Wtype
}
func (p *SegServicePostag2stringArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServicePostag2stringArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Wtype = v
	}
	return nil
}

func (p *SegServicePostag2stringArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("postag2string_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServicePostag2stringArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("wtype", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wtype: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Wtype)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.wtype (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wtype: ", p), err)
	}
	return err
}

func (p *SegServicePostag2stringArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServicePostag2stringArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServicePostag2stringResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServicePostag2stringResult() *SegServicePostag2stringResult {
	return &SegServicePostag2stringResult{}
}

var SegServicePostag2stringResult_Success_DEFAULT string

func (p *SegServicePostag2stringResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return SegServicePostag2stringResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *SegServicePostag2stringResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServicePostag2stringResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServicePostag2stringResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *SegServicePostag2stringResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("postag2string_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServicePostag2stringResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServicePostag2stringResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServicePostag2stringResult(%+v)", *p)
}

// Attributes:
//  - TermID
type SegServiceGetExtendTermArgs struct {
	TermID int32 `thrift:"term_id,1" json:"term_id"`
}

func NewSegServiceGetExtendTermArgs() *SegServiceGetExtendTermArgs {
	return &SegServiceGetExtendTermArgs{}
}

func (p *SegServiceGetExtendTermArgs) GetTermID() int32 {
	return p.TermID
}
func (p *SegServiceGetExtendTermArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetExtendTermArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TermID = v
	}
	return nil
}

func (p *SegServiceGetExtendTermArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_extend_term_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetExtendTermArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("term_id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term_id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.TermID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.term_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term_id: ", p), err)
	}
	return err
}

func (p *SegServiceGetExtendTermArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetExtendTermArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SegServiceGetExtendTermResult struct {
	Success []*ExtendTerm `thrift:"success,0" json:"success,omitempty"`
}

func NewSegServiceGetExtendTermResult() *SegServiceGetExtendTermResult {
	return &SegServiceGetExtendTermResult{}
}

var SegServiceGetExtendTermResult_Success_DEFAULT []*ExtendTerm

func (p *SegServiceGetExtendTermResult) GetSuccess() []*ExtendTerm {
	return p.Success
}
func (p *SegServiceGetExtendTermResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SegServiceGetExtendTermResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *SegServiceGetExtendTermResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ExtendTerm, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem34 := &ExtendTerm{}
		if err := _elem34.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem34), err)
		}
		p.Success = append(p.Success, _elem34)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *SegServiceGetExtendTermResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("get_extend_term_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SegServiceGetExtendTermResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *SegServiceGetExtendTermResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SegServiceGetExtendTermResult(%+v)", *p)
}
